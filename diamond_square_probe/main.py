import numpy as np
import random
import matplotlib.pyplot as plt


def diamond_square(size, seed, roughness):
    random.seed(seed)
    array = np.zeros((size, size))

    # Initialize the corners
    array[0, 0] = random.uniform(0, 1)
    array[0, size - 1] = random.uniform(0, 1)
    array[size - 1, 0] = random.uniform(0, 1)
    array[size - 1, size - 1] = random.uniform(0, 1)

    step = size - 1

    while step > 1:
        half_step = step // 2

        # Diamond step
        for x in range(0, size - 1, step):
            for y in range(0, size - 1, step):
                average = (array[x, y] + array[x + step, y] + array[x, y + step] + array[x + step, y + step]) / 4
                array[x + half_step, y + half_step] = average + random.uniform(-roughness, roughness)

        # Square step
        for x in range(0, size, half_step):
            for y in range((x + half_step) % step, size, step):
                total = 0
                count = 0

                if x >= half_step:
                    total += array[x - half_step, y]
                    count += 1
                if x + half_step < size:
                    total += array[x + half_step, y]
                    count += 1
                if y >= half_step:
                    total += array[x, y - half_step]
                    count += 1
                if y + half_step < size:
                    total += array[x, y + half_step]
                    count += 1

                average = total / count
                array[x, y] = average + random.uniform(-roughness, roughness)

        step = half_step
        roughness *= 0.5

    return array


def random_midpoint_displacement(size, seed, roughness):
    random.seed(seed)
    array = np.zeros((size, size))

    # Initialize the corners
    array[0, 0] = random.uniform(0, 1)
    array[0, size - 1] = random.uniform(0, 1)
    array[size - 1, 0] = random.uniform(0, 1)
    array[size - 1, size - 1] = random.uniform(0, 1)

    step = size - 1

    while step > 1:
        half_step = step // 2

        # Diamond step
        for x in range(0, size - 1, step):
            for y in range(0, size - 1, step):
                average = (array[x, y] + array[x + step, y] + array[x, y + step] + array[x + step, y + step]) / 4
                array[x + half_step, y + half_step] = average + random.uniform(-roughness, roughness)

        # Square step
        for x in range(0, size, half_step):
            for y in range(0, size, half_step):
                if x + half_step < size and y + half_step < size:
                    average = (array[x, y] + array[x + step, y] + array[x, y + step] + array[x + step, y + step]) / 4
                    array[x + half_step, y + half_step] = average + random.uniform(-roughness, roughness)

        step = half_step
        roughness *= 0.5

    return array

size = 2049 # Size of the array (must be 2^n + 1)
# seed = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"  # Seed for random number generation
seed = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"  # Seed for random number generation
roughness = 1.5  # Roughness parameter

middle = 0.675
margin = 0.010

fractal_array = diamond_square(size, seed, roughness)

for en, e in enumerate(fractal_array, start=0):
    for jn, j in enumerate(e, start=0):
        if (middle + margin) > j > (middle - margin):
            fractal_array[en][jn] = 0
        else:
            fractal_array[en][jn] = 1


plt.imshow(fractal_array, cmap="binary")
plt.colorbar()
plt.title("Fractal Generated by Diamond-Square Algorithm")
plt.show()

